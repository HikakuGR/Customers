@page "/"
@using BlazorApp.Services
@using BlazorApp.Models


@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="table-wrapper">
        <div class="table-title">
            <div class="row">
                <div class="col-sm-12"><h2>Customers <b>Table</b></h2></div>
            </div>
            <div class="row">
                <div class="col-sm-8">
                    <button @onclick="@(() => NavigationManager.NavigateTo("/CreateCustomer"))"><span class="oi oi-plus"></span> Add</button>
                </div>
                <div class="col-sm-4">
                    <div class="search-box">
                        <span class="oi oi-magnifying-glass"></span>
                        <input type="text" class="form-control" @oninput="OnSearch" placeholder="Search...">
                    </div>
                </div>
            </div>
        </div>
        @*<Table Customers="Customers">
            <NullTemplate>
                <img src="https://media0.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" />
            </NullTemplate>
            <EmptyTemplate>
                <span style="color:blue">There are no records to show</span>
            </EmptyTemplate>
        </Table>*@
        
        <CustomersList Customers="Customers" />

        <div class="hint-text">Showing Page <b>@(currentPage + 1)</b> out of <b>@(Math.Ceiling((double)total / (double)pageSize))</b> </div>

        <nav aria-label="Page navigation">
            <ul class="pagination @(total <= pageSize ? "disabled" : null)">
                <li @onclick="@(() => Previous())"
                    style="cursor:pointer"
                    class="page-item @(currentPage == 0 ? "disabled" : null) ">
                    <span class="page-link">Previous</span>
                </li>
                <li style="cursor:pointer" class="page-item @(currentPage == 0 || currentPage == 1 ? "hidden" : null)" @onclick="@(() => SelectedPage(currentPage - 2))"><span class="page-link">@(currentPage - 1)</span></li>
                <li style="cursor:pointer" class="page-item @(currentPage == 0 ? "hidden" : null)" @onclick="@(() => SelectedPage(currentPage - 1))"><span class="page-link">@(currentPage)</span></li>
                <li style="cursor:pointer" class="page-item active" @onclick="@(() => SelectedPage(currentPage))"><span class="page-link">@(currentPage + 1)</span></li>
                <li style="cursor:pointer" class="page-item @(currentPage == ((total - 1) / pageSize) ? "hidden" : null)" @onclick="@(() => SelectedPage(currentPage + 1))"><span class="page-link">@(currentPage + 2)</span></li>
                <li style="cursor:pointer" class="page-item @(currentPage == ((total - 1) / pageSize) || currentPage == ((total - 1) / pageSize) - 1 ? "hidden" : null)" @onclick="@(() => SelectedPage(currentPage + 2))"><span class="page-link">@(currentPage + 3)</span></li>
                <li @onclick="@(() => Next())"
                    style="cursor:pointer"
                    class="page-item @(currentPage == ((total - 1) / pageSize) ? "disabled" : null) ">
                    <span class="page-link">Next</span>
                </li>
            </ul>
        </nav>
    </div>
</div>



@code {

    private List<Customer> Customers = new List<Customer>();
    private int currentPage = 0;
    private int pageSize = 10;
    private long total = 0;
    private string filterText = "";

    async Task LoadCustomers(int page = 0, int pageSize = 10, string filterText = "")
    {
        Customers = await CustomerService.GetPaged(page, pageSize, filterText);
        total = await CustomerService.GetCustomerCount(filterText);
    }



    protected override async Task OnInitializedAsync()
    {

        await LoadCustomers(currentPage, pageSize, filterText);
    }

    private async Task Next()
    {
        currentPage++;
        await LoadCustomers(currentPage, pageSize, filterText);
    }

    private async Task Previous()
    {
        currentPage--;
        await LoadCustomers(currentPage, pageSize, filterText);
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadCustomers(currentPage, pageSize, filterText);
    }

    private async Task OnSearch(ChangeEventArgs args)
    {
        filterText = args.Value.ToString();
        await SelectedPage(0);
    }
}
